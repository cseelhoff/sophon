---
- name: Create a CoreOS VM on Proxmox
  hosts: localhost
  gather_facts: true  # We need this for IP address discovery
  vars_files:
    - vars.yml
    - secrets.yml
  tasks:  
    # Find the IP address that Proxmox can reach
    - name: Get local IP address
      set_fact:
        # local_ip: "{{ ansible_default_ipv4.address }}"    
        # if running WSL2
        # netsh interface portproxy add v4tov4 listenport=8000 listenaddress=0.0.0.0 connectport=8000 connectaddress=172.22.33.97
        # netsh advfirewall firewall add rule name="Allow TCP Port 8000" dir=in action=allow protocol=TCP localport=8000
        # TURN OFF WHEN DONE:
        # netsh interface portproxy delete v4tov4 listenport=8000 listenaddress=0.0.0.0
        # netsh interface portproxy show all
        local_ip: "10.0.3.123"

    - name: Read SSH public key
      ansible.builtin.slurp:
        src: "{{ ssh_public_key_path }}"
      register: ssh_key
        
    - name: Obtain Proxmox API ticket
      uri:
        url: "https://{{ proxmox_api_host }}:8006/api2/json/access/ticket"
        method: POST
        body:
          username: "{{ proxmox_api_user }}"
          password: "{{ proxmox_api_password }}"
        body_format: form-urlencoded
        validate_certs: false
      register: pve_ticket
      
    - name: Set authentication cookies and CSRF token
      set_fact:
        pve_auth_cookie: "{{ pve_ticket.json.data.ticket }}"
        pve_csrf_token: "{{ pve_ticket.json.data.CSRFPreventionToken }}"

    - name: Download QCOW2 to Proxmox from local server
      uri:
        url: "https://{{ proxmox_api_host }}:8006/api2/json/nodes/{{ node }}/storage/{{ storage_pool }}/download-url"
        method: POST
        headers:
          Cookie: "PVEAuthCookie={{ pve_auth_cookie }}"
          CSRFPreventionToken: "{{ pve_csrf_token }}"
        body:
          content: "iso"  # Proxmox treats this as a generic downloadable file
          filename: "{{ qcow2_img_filename }}"
          url: "http://{{ local_ip }}:{{ http_file_server_port }}/{{ qcow2_img_filename }}"
        body_format: json
        validate_certs: false
      register: qcow2_download
      failed_when: qcow2_download.status != 200 and "already exists" not in (qcow2_download.content|default("")|string)
      
    - name: Debug QCOW2 download response
      debug:
        msg: "{{ qcow2_download }}"

    - name: Wait for QCOW2 download to complete
      uri:
        url: "https://{{ proxmox_api_host }}:8006/api2/json/nodes/{{ node }}/storage/{{ storage_pool }}/content"
        method: GET
        headers:
          Cookie: "PVEAuthCookie={{ pve_auth_cookie }}"
          CSRFPreventionToken: "{{ pve_csrf_token }}"
        validate_certs: false
      register: storage_content
      until: >
        storage_content.json.data | selectattr('volid', 'equalto', storage_pool + ':iso/' + qcow2_img_filename) 
        | map(attribute='format') | select('defined') | list | length > 0
      retries: 30
      delay: 10

    # Define the ignition config as a variable for easier reading
    - name: Create network_config file contents
      set_fact:
        network_config: |
          [connection]
          id=Wired connection 1
          type=ethernet
          match-device=type:ethernet

          [ipv4]
          address1={{ portainer_ip }}/24,10.20.177.1
          method=manual

    - name: Create ignition JSON string
      set_fact:
        ignition_config: >-
          {
            "ignition": {
              "version": "3.0.0"
            },
            "passwd": {
              "users": [
                {
                  "name": "{{ coreos_username }}",
                  "passwordHash": "$y$j9T$icTH9ilSsldG.Sew1Ipk./$P4/ewJbHmjiKy99l7Z9bcen5dVYRf0SetM3C2l8VKn2",
                  "sshAuthorizedKeys": ["{{ ssh_key['content'] | b64decode | trim }}"],
                  "groups": [
                    "sudo",
                    "docker"
                  ]
                }
              ]
            },
            "storage": {
              "files": [
                {
                  "path": "/etc/NetworkManager/system-connections/static.nmconnection",
                  "mode": 384,
                  "contents": {
                    "source": "data:text/plain;charset=utf-8;base64,{{ network_config | b64encode }}"
                  }
                }
              ]
            }
          }

    # Modify the ignition json to replace commas with double-commas
    - name: Clean ignition JSON
      set_fact:
        ignition_config: "{{ ignition_config  | to_json | quote | regex_replace(',', ',,') }}"

    - name: Debug cleaned ignition JSON
      debug:
        msg: "Cleaned ignition config: {{ ignition_config }}"

    # Create the VM using the QCOW2 image in one step
    - name: Create VM on Proxmox with imported disk
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_password }}"
        node: "{{ node }}"
        name: "{{ vm_name }}"
        cores: "{{ cores }}"
        memory: "{{ memory }}"
        ostype: "l26"
        onboot: true
        autostart: true
        net:
          net0: "virtio,bridge=vmbr0"
        state: present
        timeout: 600
        scsi:
          scsi0: "local:iso/{{ qcow2_img_filename }},format=qcow2"
        args: "-fw_cfg name=opt/com.coreos/config,string={{ ignition_config }}"
      register: vm_create
      delegate_to: localhost
          
    # Start VM
    - name: Start VM on Proxmox
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_password }}"
        node: "{{ node }}"
        vmid: "{{ vm_create.vmid }}"
        state: started
      delegate_to: localhost
